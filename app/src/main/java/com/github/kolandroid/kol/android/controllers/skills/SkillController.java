package com.github.kolandroid.kol.android.controllers.skills;

import android.app.Activity;
import android.content.Context;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.github.kolandroid.kol.android.R;
import com.github.kolandroid.kol.android.controller.ModelController;
import com.github.kolandroid.kol.android.controllers.web.WebController;
import com.github.kolandroid.kol.android.screen.Screen;
import com.github.kolandroid.kol.android.screen.ScreenSelection;
import com.github.kolandroid.kol.android.screen.ViewScreen;
import com.github.kolandroid.kol.android.util.ImageDownloader;
import com.github.kolandroid.kol.model.models.WebModel;
import com.github.kolandroid.kol.model.models.skill.SkillModel;

public class SkillController extends ModelController<SkillModel> {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = 8802030177173483415L;
    private boolean expanded = false;

    public SkillController(SkillModel model) {
        super(model);
    }

    @Override
    public int getView() {
        return R.layout.skill_view;
    }

    @Override
    public void attach(final View view, SkillModel model, final Screen host) {
        WebModel description = model.getDescription();
        if (description == null) {
            // Display image/name of the item as a backup

            TextView text = (TextView) view.findViewById(R.id.skill_name);
            text.setText(model.getText());
            text.setVisibility(View.VISIBLE);

            TextView subtext = (TextView) view.findViewById(R.id.skill_cost);
            subtext.setText(model.getSubtext());
            subtext.setVisibility(View.VISIBLE);

            if (model.getImage() != null && !model.getImage().equals("")) {
                ImageView img = (ImageView) view.findViewById(R.id.skill_image);
                img.setVisibility(View.VISIBLE);
                ImageDownloader.loadFromUrl(img, model.getImage());
            }
        } else {
            ViewScreen desc = (ViewScreen) view.findViewById(R.id.dialog_skill_description);
            desc.display(new WebController(description), host);
        }


        final EditText amount = (EditText) view.findViewById(R.id.skill_amount);
        final EditText target = (EditText) view.findViewById(R.id.skill_target);

        final Button one = (Button) view.findViewById(R.id.skill_one_submit);

        one.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                boolean submitted;
                if (expanded) {
                    getModel().cast(amount.getText().toString(), target.getText().toString());
                } else {
                    getModel().cast("1", "");
                }

                Activity a = host.getActivity();
                if (a != null) {
                    InputMethodManager imm = (InputMethodManager) a.getSystemService(Context.INPUT_METHOD_SERVICE);
                    imm.toggleSoftInput(0, 0);
                }
                host.close();
            }
        });

        TextView.OnEditorActionListener listener = new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if (actionId == EditorInfo.IME_ACTION_GO) {
                    one.performClick();
                    return true;
                }
                return false;
            }
        };
        amount.setOnEditorActionListener(listener);
        target.setOnEditorActionListener(listener);

        final View targetLabel = view.findViewById(R.id.skill_target_label);

        SkillModel.Type modelType = getModel().getType();
        final Button expand = (Button) view.findViewById(R.id.skill_more_load);
        if (modelType == SkillModel.Type.COMBAT || modelType == SkillModel.Type.PASSIVE) {
            expand.setVisibility(View.GONE);
            one.setVisibility(View.GONE);
        }

        expand.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                one.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT));
                expand.setText("");
                expand.setMinimumWidth(0);
                expand.setWidth(0);
                amount.setVisibility(View.VISIBLE);
                expanded = true;

                if (amount.requestFocus()) {
                    Activity a = host.getActivity();
                    if (a != null) {
                        InputMethodManager imm = (InputMethodManager) a.getSystemService(Context.INPUT_METHOD_SERVICE);
                        imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_NOT_ALWAYS);
                    }
                }

                if (getModel().getType() == SkillModel.Type.BUFF) {
                    target.setVisibility(View.VISIBLE);
                    targetLabel.setVisibility(View.VISIBLE);
                    amount.setImeOptions(EditorInfo.IME_ACTION_NEXT);
                }
            }
        });
    }

    @Override
    public void chooseScreen(ScreenSelection choice) {
        choice.displayDialog(this);
    }

}
