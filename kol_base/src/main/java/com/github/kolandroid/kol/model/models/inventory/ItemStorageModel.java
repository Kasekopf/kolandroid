package com.github.kolandroid.kol.model.models.inventory;

import com.github.kolandroid.kol.connection.ServerReply;
import com.github.kolandroid.kol.model.GroupModel;
import com.github.kolandroid.kol.model.models.inventory.pockets.ItemPocket;
import com.github.kolandroid.kol.model.models.inventory.pockets.ItemPocketModel;
import com.github.kolandroid.kol.session.Session;
import com.github.kolandroid.kol.util.Logger;
import com.github.kolandroid.kol.util.Regex;
import com.github.kolandroid.kol.util.StringUtils;

import java.util.ArrayList;
import java.util.Map;

public class ItemStorageModel extends GroupModel<ItemPocket> {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = 34637430160L;

    private static final Regex HEADER_TABS = new Regex("<center>\\[.*?</center>", 0);

    private static final Regex TAB = new Regex("\\[(.*?)\\]( |&nbsp;|</center>)", 1);
    private static final Regex TAB_NAME = new Regex("(<[^>]*>)?([^<>]*)(<[^>]*>)?", 2);
    private static final Regex TAB_LINK = new Regex("<a[^>]*href ?= ?[\"']?([^\"'>]*)[\"'>]", 1);

    // inventory.php, closet.php, and storage.php all have a $.get of this form
    //  If this is ever applied to any other pages, this should be revisited
    private static final Regex THIS_TAB_LINK = new Regex("\\$\\.get\\('[^']*(which=[^&']+)[&']", 1);

    private final String baseUrl;

    private final ItemPocket[] pockets;

    public ItemStorageModel(Session s, ServerReply text, String baseUrl) {
        super(s);

        this.baseUrl = baseUrl;

        ArrayList<ItemPocket> foundPockets = new ArrayList<>();
        String tabs = HEADER_TABS.extractSingle(text.html, "");
        if (tabs.isEmpty()) {
            Logger.log("ItemStorageModel", "Unable to find tabs");

            foundPockets.add(constructPocket("Consume", s, baseUrl + "?which=1"));
            foundPockets.add(constructPocket("Equip", s, baseUrl + "?which=2"));
            foundPockets.add(constructPocket("Misc", s, baseUrl + "?which=3"));
            foundPockets.add(constructPocket("Recent", s, baseUrl + "?which=f-1"));
        } else {
            Logger.log("ItemStorageModel", "Found tabs: " + tabs);
            String thisTab = THIS_TAB_LINK.extractSingle(text.html, "");
            if (thisTab.isEmpty()) {
                Logger.log("ItemStorageModel", "Unable to determine current tab");
                thisTab = text.url;
            } else {
                thisTab = baseUrl + "?" + thisTab;
            }

            for (String tab : TAB.extractAllSingle(tabs)) {
                String name = TAB_NAME.extractSingle(tab, "");
                String url = TAB_LINK.extractSingle(tab, thisTab); //default to the page we are loading

                if (name.equals("+")) continue;
                else if (name.equalsIgnoreCase("consumables")) name = "Consume";
                else if (name.equalsIgnoreCase("equipment")) name = "Equip";
                else if (name.equalsIgnoreCase("miscellaneous")) name = "Misc";
                else if (name.equalsIgnoreCase("recent items")) name = "Recent";

                name = StringUtils.htmlDecode(name);
                Logger.log("ItemStorageModel", "Found tab: " + name + ", " + url);

                foundPockets.add(constructPocket(name, s, url));
            }
        }

        pockets = foundPockets.toArray(new ItemPocket[foundPockets.size()]);

        loadContent(text);
    }

    protected ItemPocket constructPocket(String name, Session s, String url) {
        return new ItemPocketModel(name, s, url);
    }

    protected void loadContent(ServerReply text) {
        if (!text.url.contains(baseUrl)) {
            Logger.log("ItemStorageModel", "Attempted to load non-" + baseUrl + " page into ItemStorageModel: "
                    + text.url);
            return;
        }

        ArrayList<String> tabs = TAB.extractAllSingle(HEADER_TABS.extractSingle(text.html, ""));
        for (int i = 0; i < tabs.size(); i++) {
            if (TAB_LINK.extractSingle(tabs.get(i), null) == null) {
                //No link found to go to this tab; we must be IN this tab
                ItemPocket[] children = this.getChildren();
                if (i >= children.length) {
                    Logger.log("ItemStorageModel", "Unable to find child " + TAB_NAME.extractSingle(tabs.get(i), "[?]") + "; this model has only " + children.length + " children");
                } else {
                    children[i].process(text);
                    Logger.log("ItemStorageModel", "Loaded " + TAB_NAME.extractSingle(tabs.get(i), "[?]") + " into " + children[i].getTitle());
                    this.setActiveChild(i);
                }
                return;
            }
        }

    }

    public void apply(InventoryUpdateModel update) {
        boolean requireRefresh = false;

        Map<String, Integer> updates = update.getUpdates();
        for (String key : updates.keySet()) {
            boolean found = false;
            for (ItemPocket model : getChildren()) {
                if (model.apply(key, updates.get(key))) {
                    found = true;
                }
            }

            if (!found && updates.get(key) > 0) {
                // We have gained a new type of item; we have to fully refresh the page to figure out what it is
                // TODO: implement $.get('inventory.php?ajax=1&which=' + whichpage + '&onlyitem=' + iid, addNewItem);
                Logger.log("ItemStorageModel", "Unable to find item " + key + " to update");
                requireRefresh = true;
            }
        }

        if (requireRefresh) {
            for (ItemPocket model : getChildren()) {
                model.refreshIfLoaded();
            }
        }
    }

    @Override
    public ItemPocket[] getChildren() {
        return pockets;
    }
}
