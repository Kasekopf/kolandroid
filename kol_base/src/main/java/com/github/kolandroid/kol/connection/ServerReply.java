package com.github.kolandroid.kol.connection;

import com.github.kolandroid.kol.util.Logger;
import com.github.kolandroid.kol.util.Regex;

import org.apache.commons.io.IOUtils;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.net.HttpURLConnection;
import java.nio.charset.Charset;

public class ServerReply implements Serializable {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = -7171484980493452228L;
    // Regex to find the top results pane of any page
    private static final Regex RESULTS_PANE = new Regex(
            "<table[^>]*><tr><td[^>]*><b>Results:?.*?(<center>.*?</center>)</td></tr><tr><td height=4></td></tr></table>", 1);
    // Regex to find contents of the <body> tag of any page
    private static final Regex PAGE_BODY = new Regex(
            "(<body[^>]*>)(.*)(</body>)", 2);

    public final int responseCode;
    public final String redirectLocation;
    public final String date;
    public final String url;
    public final String cookie;
    public final String html;

    public ServerReply(int responseCode, String redirectLocation, String date,
                       String html, String url, String cookie) {
        this.responseCode = responseCode;
        this.redirectLocation = redirectLocation;
        this.date = date;
        this.html = html;
        this.url = url;
        this.cookie = cookie;
    }

    protected ServerReply(HttpURLConnection base) throws IOException {
        responseCode = base.getResponseCode();
        redirectLocation = (responseCode / 100 == 3) ? base
                .getHeaderField("Location") : null;

        url = base.getURL().toString();
        date = base.getHeaderField("Date");
        cookie = getCookie(base);
        if (cookie.contains("magic")) {
            Logger.log("ServerReply", "Received magic cookie!");
        }

        this.html = getResponse(base);

    }

    public ServerReply(ServerReply prototype, String html) {
        this.responseCode = prototype.responseCode;
        this.redirectLocation = prototype.redirectLocation;
        this.date = prototype.date;
        this.url = prototype.url;
        this.cookie = prototype.cookie;

        this.html = html;
    }

    private static String getResponse(HttpURLConnection base)
            throws IOException {
        InputStream is = base.getInputStream();
        if (is == null)
            return "";
        return IOUtils.toString(is, Charset.forName("UTF-8"));
    }

    private static String getCookie(HttpURLConnection base) {
        String cookies = "";
        for (int i = 0; ; i++) {
            if (base.getHeaderField(i) == null)
                break;

            if ("Set-Cookie".equals(base.getHeaderFieldKey(i))) {
                if (cookies.length() > 0)
                    cookies += "; ";
                cookies += base.getHeaderField(i);
            }
        }
        return cookies;
    }

    public static ServerReply fabricate(String html, String url) {
        return new ServerReply(200, "", "", html, url, "");
    }

    @Override
    public String toString() {
        String s = "RESPONSE CODE: " + responseCode;
        if (responseCode / 100 == 3)
            s += "\nREDIRECT: " + redirectLocation;
        s += "\nRESULT: " + html;
        return s;
    }

    /**
     * Extract a page for the results pane of this page, if any exists.
     *
     * @return A page representing the results pane; null if no results pane
     * was found.
     */
    public ServerReply extractResultsPane() {
        String resultsPane = RESULTS_PANE.extractSingle(html);
        if (resultsPane == null)
            return null;

        Logger.log("ServerReply", "Detected results pane: " + resultsPane);
        String updatedUrl = "https://www.kingdomofloathing.com/results.php?androiddisplay=results";

        return substituteBody(updatedUrl, "<center>" + resultsPane + "</center>");
    }

    public ServerReply substituteBody(String newUrl, String newBody) {
        String newHtml;
        if (PAGE_BODY.matches(html)) {
            newHtml = PAGE_BODY.replaceAll(html, "$1" + newBody + "</body>");
        } else {
            Logger.log("ServerReply", "Could not find the body of " + url);
            newHtml = "<html><head></head><body>" + newBody + "</body></html>";
        }

        return new ServerReply(responseCode, redirectLocation, date, newHtml, newUrl, cookie);
    }

    public ServerReply removeResultsPane() {
        String newHtml = RESULTS_PANE.replaceAll(html, "");
        Logger.log("ServerReply", newHtml);
        return new ServerReply(this, newHtml);
    }

    public boolean hasBody() {
        return this.html.contains("body");
    }
}