package com.github.kolandroid.kol.model.models.fight;

import com.github.kolandroid.kol.connection.ServerReply;
import com.github.kolandroid.kol.gamehandler.ViewContext;
import com.github.kolandroid.kol.model.elements.ActionElement;
import com.github.kolandroid.kol.model.elements.OptionElement;
import com.github.kolandroid.kol.model.elements.basic.BasicGroup;
import com.github.kolandroid.kol.model.elements.interfaces.ModelGroup;
import com.github.kolandroid.kol.model.models.WebModel;
import com.github.kolandroid.kol.session.Session;
import com.github.kolandroid.kol.util.Logger;
import com.github.kolandroid.kol.util.Regex;

import java.util.ArrayList;

public class FightModel extends WebModel {
    /**
     * Autogenerated by eclipse.
     */
    private static final long serialVersionUID = 7344809755641734582L;

    /**
     * //Ignored for now. private static final Regex ROUND_NUMBER = new
     * Regex("var onturn = (\\d+);", 1);
     */
    private static final Regex FIGHT_OVER = new Regex("<!--WINWINWIN-->");
    private static final Regex FIGHT_OVER2 = new Regex("window.fightover ?= ?true;"); //WINWINWIN doesn't appear when you run away or lose
    private static final Regex ACTION_BTN = new Regex(
            "<input[^<>]*type=[\"']?hidden[\"']?[^<>]*value=[\"']?([^\"']*?)[\"']?>.*?<input[^<>]*value=[\"']?([^\"<>]*?)[\"']?>",
            1, 2);

    private static final Regex ALL_SKILLS = OptionElement
            .regexFor("whichskill");
    private static final Regex ALL_ITEMS = OptionElement.regexFor("whichitem");

    private static final Regex ACTION_BAR = new Regex(
            "<div[^>]*skillmenu[^>]*>.*?(?=<div[^>]*content_)");
    private static final Regex MAIN_TAG = new Regex(
            "<div[^>]*content_[^>]*(?=>)");
    private static final Regex BUTTON_REVEALER = new Regex(
            "<a[^>]*>\\(show old combat form\\)</a>");
    private static final Regex BUTTONS = new Regex("<form[^>]*>.*?</form>");

    private static final Regex HAS_FUNKSLINGING = new Regex(
            "<select[^>]*whichitem2[^>]*>");

    private static final Regex ADVENTURE_AGAIN = new Regex("<[aA][^>]*href=[\"']?([^\"'>]*)[^>]*>(Adventure Again.*?)</[aA]>", 1, 2);

    private static final FightActionHistory<FightItem> ITEM_HISTORY = new FightActionHistory<>("Items");
    private static final FightActionHistory<FightAction> SKILL_HISTORY = new FightActionHistory<>("Skills");
    private final ActionElement attack;

    private final boolean fightFinished;
    private final ArrayList<FightAction> skills;
    private final ArrayList<FightItem> items;
    private final boolean funkslinging;

    private final ActionElement nextAdventure;
    private final FightActionBar barModel;

    public FightModel(Session s, ViewContext host, ServerReply text) {
        super(s, new ServerReply(text, filterHtml(text.html)));

        attack = new ActionElement(s, "Attack", "POST/fight.php?action=attack");
        this.fightFinished = (FIGHT_OVER.matches(text.html) || FIGHT_OVER2.matches(text.html));
        this.funkslinging = HAS_FUNKSLINGING.matches(text.html);
        this.skills = new ArrayList<>();
        this.items = new ArrayList<>();

        if (fightFinished) {
            String[] matches = ADVENTURE_AGAIN.extract(text.html);
            if (matches == null) {
                Logger.log("FightModel", "Unable to location adventure repeat text");
                Logger.logBig("FightModel", text.html);
                this.nextAdventure = null;
            } else {
                Logger.log("FightModel", "Found adventure again link: " + matches[0]);
                this.nextAdventure = new ActionElement(s, matches[1], matches[0]);
            }
        } else {
            this.nextAdventure = null;
        }


        processSkills(text.html);
        processItems(text.html);

        if (ACTION_BAR.matches(text.html)) {
            this.barModel = new FightActionBar(s, host, this);
        } else {
            this.barModel = null;
        }
    }

    private static String filterHtml(String html) {
        // First, we remove all components of the action bar

        // Remove the top bar
        String noBar = ACTION_BAR.replaceAll(html, "");
        // Remove special styling on the content div
        String renamed = MAIN_TAG.replaceAll(noBar,
                "$0 style=\"top:0px; margin:8px\"");
        // Remove the "Show old combat form" link
        String actionClear = BUTTON_REVEALER.replaceAll(renamed, "");

        if (!html.contains("name=\"whichskill\" value=\"7193\"")) { //do not trigger on inner-wolf pages
            // Finally, remove all forms from the older version of the fight page.
            return BUTTONS.replaceAll(actionClear, "");
        } else {
            return actionClear;
        }
    }

    private void processSkills(String html) {
        ArrayList<String[]> buttons = ACTION_BTN.extractAll(html);
        for (String[] button : buttons) {
            if (button == null)
                continue;
            String action = button[0];
            String text = button[1];
            String img;

            Logger.log("FightModel", "Found button: " + action);
            if (action == null || text == null || text.length() == 0)
                continue;
            if (action.contentEquals("attack") || action.contentEquals("skill")
                    || action.contentEquals("useitem"))
                continue;

            switch (action) {
                case "steal":
                    img = "http://images.kingdomofloathing.com/itemimages/knobsack.gif";
                    break;
                case "runaway":
                    img = "http://images.kingdomofloathing.com/itemimages/runaway.gif";
                    break;
                default:
                    img = "http://images.kingdomofloathing.com/itemimages/blank.gif";
                    break;
            }

            this.skills.add(new FightBasicAction(getSession(), text, img,
                    action, SKILL_HISTORY));
        }

        String dropdown = ALL_SKILLS.extractSingle(html, "");
        ArrayList<OptionElement> dropdown_skills = OptionElement
                .extractOptions(dropdown);
        for (OptionElement option : dropdown_skills) {
            this.skills.add(new FightSkill(getSession(), option, SKILL_HISTORY));
        }
    }

    private void processItems(String html) {
        String dropdown = ALL_ITEMS.extractSingle(html, "");

        ArrayList<OptionElement> dropdown_items = OptionElement
                .extractOptions(dropdown);
        for (OptionElement option : dropdown_items) {
            if (option.text.contains("(select an item)"))
                continue;

            items.add(new FightItem(getSession(), option, ITEM_HISTORY));
        }
    }

    public ArrayList<ModelGroup<FightAction>> getSkills() {
        ArrayList<ModelGroup<FightAction>> result = new ArrayList<>();
        if (skills != null) {
            ArrayList<FightAction> recentSkills = SKILL_HISTORY.identify(skills, getSettings());
            if (recentSkills.size() > 0) {
                result.add(new BasicGroup<>("Recently Used:", recentSkills));
            }

            result.add(new BasicGroup<>("All Skills:", skills));
        }
        return result;
    }

    public ArrayList<ModelGroup<FightItem>> getItems() {
        ArrayList<ModelGroup<FightItem>> result = new ArrayList<>();
        if (items != null) {
            ArrayList<FightItem> recentItems = ITEM_HISTORY.identify(items, getSettings());
            if (recentItems.size() > 0) {
                result.add(new BasicGroup<>("Recently Used:", recentItems));
            }

            result.add(new BasicGroup<>("All Items:", items));
        }
        return result;
    }

    public FightActionBar getActionBar() {
        return barModel;
    }

    public boolean isFightOver() {
        return fightFinished;
    }

    public ActionElement getAttack() {
        return attack;
    }

    public ActionElement getNextAdventure() {
        return nextAdventure;
    }

    public boolean hasFunkslinging() {
        return funkslinging;
    }
}
